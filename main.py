
import os
import telebot
import openai
from apscheduler.schedulers.blocking import BlockingScheduler
from datetime import datetime

# üîê –ö–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TG_TOKEN = os.getenv("TG_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
USER_ID = os.getenv("USER_ID")  # –¢–≤–æ–π Telegram ID

bot = telebot.TeleBot(TG_TOKEN)
openai.api_key = OPENAI_API_KEY

context = [
    {"role": "system", "content": "–¢—ã ‚Äî –ª–∏—á–Ω—ã–π –∫–æ—É—á –î–∏–Ω–∞. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –¥—É—Ö–µ –í–∏–∫—Ç–æ—Ä–∞ –§—Ä–∞–Ω–∫–ª–∞: –ø–æ–º–æ–≥–∞–µ—à—å –Ω–∞–π—Ç–∏ —Å–º—ã—Å–ª, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å, –≥–æ–≤–æ—Ä–∏—à—å –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏ –∏ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."}
]

# –£—Ç—Ä–µ–Ω–Ω–∏–µ, –¥–Ω–µ–≤–Ω—ã–µ, –≤–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def send_morning_message():
    bot.send_message(USER_ID, "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –î–∏–Ω üåÖ\n\n1. –ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?\n2. –ö—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å —Å–µ–≥–æ–¥–Ω—è?\n3. –ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å –¥–ª—è —Å–≤–æ–µ–π –º–∏—Å—Å–∏–∏?")

def send_day_check():
    bot.send_message(USER_ID, "–î–∏–Ω, –∫–∞–∫ –∏–¥—ë—Ç –¥–µ–Ω—å? ‚úÖ –î—É—à ‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è ‚úÖ –ó–∞–≤—Ç—Ä–∞–∫ ‚úÖ –ó–∞–¥–∞—á–∞\n–û—Ç–º–µ—Ç—å, —á—Ç–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª.")

def send_evening_reflection():
    bot.send_message(USER_ID, "üåô –í–µ—á–µ—Ä.\n1. –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –¥–∞–ª–æ —Ç–µ–±–µ —Å–º—ã—Å–ª?\n2. –ß—Ç–æ –±—ã–ª–æ —Å–ª–æ–∂–Ω—ã–º?\n3. –ß–µ–º —Ç—ã –≥–æ—Ä–¥–∏—à—å—Å—è?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ /start –∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –î–∏–Ω. –ù–∞–ø–∏—à–∏, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å.")

@bot.message_handler(func=lambda message: True)
def chat(message):
    context.append({"role": "user", "content": message.text})
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=context,
            temperature=0.8
        )
        reply = response.choices[0].message.content
        context.append({"role": "assistant", "content": reply})
        bot.send_message(message.chat.id, reply)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = BlockingScheduler()
scheduler.add_job(send_morning_message, 'cron', hour=6, minute=30)
scheduler.add_job(send_day_check, 'cron', hour=14, minute=0)
scheduler.add_job(send_evening_reflection, 'cron', hour=21, minute=30)

def run():
    from threading import Thread
    Thread(target=scheduler.start).start()
    bot.polling()

if __name__ == '__main__':
    run()
